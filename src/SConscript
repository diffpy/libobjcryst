import os
import platform

Import('env')

# Build environment configuration --------------------------------------------

# Insert LIBRARY_PATH explicitly because some compilers
# ignore it in the system environment.
env.PrependUnique(LIBPATH=env['ENV'].get('LIBRARY_PATH', '').split(':'))

# Use Intel C++ compiler if requested by the user.
icpc = None
if env['tool'] == 'intelc':
    icpc = env.WhereIs('icpc')
    if not icpc:
        print("Cannot find the Intel C/C++ compiler 'icpc'.")
        Exit(1)
    env.Tool('intelc', topdir=icpc[:icpc.rfind('/bin')])

fast_linkflags = ['-s']

# Platform specific intricacies.
if env['PLATFORM'] == 'darwin':
    env.Append(SHLINKFLAGS=['-install_name', '$TARGET.abspath'])
    env.AppendUnique(SHLINKFLAGS='-headerpad_max_install_names')
    fast_linkflags[:] = []

# Compiler specific options
if platform.system().lower() == "windows":
    # Visual c++
    env.PrependUnique(CCFLAGS=['/Ox', '/EHsc', '/MD', '/DREAL=double'])
    env.AppendUnique(CPPDEFINES={'NDEBUG': None})
    # env.AppendUnique(LINKFLAGS='/EXPORT')
else:
    # Use double precision for objcryst's REAL
    env.PrependUnique(CCFLAGS=['-DREAL=double'])
    if icpc:
        # options for Intel C++ compiler on hpc dev-intel07
        env.PrependUnique(CCFLAGS=['-w1', '-fp-model', 'precise'])
        env.PrependUnique(LIBS=['imf'])
        fast_optimflags = ['-fast', '-no-ipo']
    else:
        # g++ options
        env.PrependUnique(CCFLAGS=['-Wall'])
        fast_optimflags = ['-ffast-math']

    # Configure build variants
    if env['build'] == 'debug':
        env.Append(CCFLAGS='-g')
    elif env['build'] == 'fast':
        env.AppendUnique(CCFLAGS=['-O3'] + fast_optimflags)
        env.AppendUnique(CPPDEFINES={'NDEBUG': None})
        env.AppendUnique(LINKFLAGS=fast_linkflags)

    if env['profile']:
        env.AppendUnique(CCFLAGS='-pg')
        env.AppendUnique(LINKFLAGS='-pg')

# Lists for storing built objects and header files
env['newmatobjs'] = []
env['cctbxobjs'] = []
env['objcrystobjs'] = []
env['lib_includes'] = []

# Subsidiary SConscripts -----------------------------------------------------

# These will create the built objects and header file lists.
SConscript(["SConscript.cctbx", "SConscript.newmat", "SConscript.objcryst"])

# Define sdist target for creating source distribution bundle
# Do so only if required to avoid extra git executions.
# Note: See .gitattributes for files excluded from sdist.
if 'sdist' in COMMAND_LINE_TARGETS:
    SConscript('SConscript.sdist')

# Top Level Targets ----------------------------------------------------------

# This retrieves the intermediate objects
newmatobjs = env["newmatobjs"]
cctbxobjs = env["cctbxobjs"]
objcrystobjs = env["objcrystobjs"]

# This builds the library
if platform.system().lower() == "windows":
    # Use a static library (does not require __declspec(dllexport) all over the code)
    libobjcryst = env.StaticLibrary("libObjCryst",
                                    objcrystobjs + cctbxobjs + newmatobjs)
else:
    libobjcryst = env.SharedLibrary("libObjCryst",
                                    objcrystobjs + cctbxobjs + newmatobjs)

lib = Alias('lib', [libobjcryst, env['lib_includes']])
Default(lib)

# Installation targets.

prefix = env['prefix']

# install-lib
install_lib = env.Install(env['libdir'], libobjcryst)
if env['PLATFORM'] == 'darwin':
    # DARWIN_INSTALL_NAME can be pre-set in sconscript.local
    env.SetDefault(DARWIN_INSTALL_NAME='$TARGET.abspath')
    env.AddPostAction(install_lib,
                      'install_name_tool -id $DARWIN_INSTALL_NAME $TARGET')
if env['PLATFORM'] == 'posix' and WhereIs('ldconfig'):
    opts = '' if os.getuid() == 0 else '-n'
    env.AddPostAction(install_lib,
                      'ldconfig %s $TARGET.dir' % opts)
Alias('install-lib', install_lib)

# install-include - make sure the root include directory is "ObjCryst", so tweak the path a little,
# so it still works using the objcryst submodule
ninc = len(Dir('.').path) + 1
s = os.path.sep
inc_target_path = lambda f: os.path.join(env['includedir'],
                                         f.path[ninc:].replace(
                                         'objcryst' + s, '').replace('version' + s, 'ObjCryst' + s))
include_targets = [inc_target_path(f) for f in env['lib_includes']]
install_include = InstallAs(include_targets, env['lib_includes'])

# DEBUG installation
print("\nenv['lib_includes']:")
for f in env['lib_includes']:
    print(f"   {f.path}")
print("\ninclude_targets:")
for f in include_targets:
    print(f"   {f}")
print("\ninstall-include:")
for f in install_include:
    print(f"   {f.path}")

Alias('install-include', install_include)

# install
Alias('install', ['install-lib', 'install-include'])
# do not install headers and data when shared library cannot be installed.
if 'install' in COMMAND_LINE_TARGETS:
    Requires(install_include, install_lib)

# vim: ft=python
